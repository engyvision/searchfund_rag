import os
import pymupdf as fitz
import pathlib
import logging
import pytesseract
from pathvalidate import sanitize_filename
from PIL import Image
#from fitz.utils import getJSON

# For Windows default installation path
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

logging.basicConfig(filename='pdf_processing.log', level=logging.INFO)

def process_pdf(pdf_path, config):
    try:
        doc = fitz.open(pdf_path)
        full_content = {"pages": []}

        for page in doc:
            content = process_page(page, config)
            full_content["pages"].append(content)

        return full_content
    except Exception as e:
        logging.error(f"Failed to process {pdf_path}: {str(e)}")
    return None

def process_page(page, config):
    content = {"text": [], "tables": []}
    blocks = page.get_text("dict", flags=fitz.TEXT_PRESERVE_LIGATURES)["blocks"]

    # Table handling
    if config.get('table_detection', False):
        tables = page.find_tables()
        # Choose either JSON or DataFrame format
        content["tables"] = [tbl.extract() for tbl in tables] # JSON format
        # content["tables"] = [tbl.to_pandas() for tbl in tables] # DataFrame format

        # OCR handling
    if config.get('ocr_enabled', False):
        pix = page.get_pixmap()
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        content["text"].append(pytesseract.image_to_string(img))

    return content

def process_folder(input_folder, output_folder, config):
    for filename in os.listdir(input_folder):
        if filename.lower().endswith(".pdf"):
            pdf_path = os.path.join(input_folder, filename)
            try:
                content = process_pdf(pdf_path, config)
                if content:
                    clean_name = sanitize_filename(os.path.splitext(filename)[0])
                    output_path = os.path.join(output_folder, f"{clean_name}.txt")
                    pathlib.Path(output_path).parent.mkdir(parents=True, exist_ok=True)
                with open(output_path, "w", encoding="utf-8") as f:
                    f.write(str(content))
            except Exception as e:
                logging.error(f"Failed {filename}: {str(e)}")

if __name__ == "__main__":
    config = {
    "table_detection": True,
    "ocr_enabled": True,
    "tesseract_config": "--oem 3 --psm 6"
    }

    # Get the directory where the script lives
    SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

    # Navigate up from src/ to project root
    PROJECT_ROOT = os.path.dirname(SCRIPT_DIR)

    INPUT_DIR = os.path.join(PROJECT_ROOT, "data", "IESE", "old")
    OUTPUT_DIR = os.path.join(PROJECT_ROOT, "data", "processed_txt")

    process_folder(INPUT_DIR, OUTPUT_DIR, config)